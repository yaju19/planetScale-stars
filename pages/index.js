import React, { Suspense } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { PrismaClient } from "@prisma/client";

export default function Home() {
  const [star, setStar] = React.useState({
    name: "",
    constellation: "",
  });

  const [allStars, setAllStars] = React.useState([]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const body = { name: star.name, constellation: star.constellation };
    try {
      const response = await fetch("/api/stars", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      if (response.status !== 200) {
        alert("something went wrong");
        //set an error banner here
      } else {
        resetForm();
        getStars();
        alert("star created successfully !!!");
        //set a success banner here
      }
      //check response, if success is false, dont take them to success page
    } catch (error) {
      alert("there was an error submitting", error);
    }
  };
  const resetForm = () => {
    setStar((prev) => ({ ...prev, name: "", constellation: "" }));
  };
  async function getStars() {
    await fetch(`api/stars`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    })
      .then((response) => response.json())
      .then((data) => setAllStars(data));
  }

  React.useEffect(() => {
    getStars();
  }, []);

  return (
    <div>
      <Head>
        <title>Planet Scale App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div style={{ textAlign: "center" }}>
        <h3>Add Stars</h3>
      </div>
      <div
        style={{
          marginLeft: "50%",
          width: "30%",
          transform: "translateX(-50%)",
        }}
      >
        <div>
          <label>Name</label>
        </div>
        <div>
          <input
            style={{ width: "100%" }}
            type="text"
            value={star.name}
            onChange={(e) =>
              setStar((prev) => ({ ...prev, name: e.target.value }))
            }
          />
        </div>
        <div>
          <label>Constellation</label>
        </div>
        <div>
          <input
            style={{ width: "100%" }}
            type="text"
            value={star.constellation}
            onChange={(e) =>
              setStar((prev) => ({ ...prev, constellation: e.target.value }))
            }
          />
        </div>
        <div style={{ marginTop: "10px" }}>
          <button
            style={{
              marginLeft: "50%",
              transform: "translateX(-50%)",
              width: "100%",
            }}
            onClick={handleSubmit}
          >
            Create
          </button>
        </div>
      </div>
      <div
        style={{
          marginLeft: "50%",
          width: "30%",
          transform: "translateX(-50%)",
        }}
      >
        <div style={{ marginTop: "50px", textAlign: "center" }}>
          <h3>All Stars</h3>
        </div>
        <Suspense fallback={<div>Loading...</div>}>
          <table style={{ textAlign: "center", width: "100%" }}>
            <thead>
              <td>Sr. No</td>
              <td>Name</td>
              <td>Constellation</td>
            </thead>
            <tbody>
              {allStars.map((star, i) => (
                <tr>
                  <td>{i + 1}</td>
                  <td>{star.name}</td>
                  <td>{star.constellation}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </Suspense>
      </div>
    </div>
  );
}
